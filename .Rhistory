for(j in 1:length(y)){
if(j < min)
y[j] = 0
else {
if(j < q1 & adj_depths$no_lower_limit[i] == 'y')
y[j] = 1
if(j < q1 & adj_depths$no_lower_limit[i] == 'n') {
dx = q1 - min
y[j] = 1 / dx * (j - min)
}
if (j >= q1 & j <= q2)
y[j] = 1
if (j > q2 ) {
dx = max - q2
y[j] = - 1/dx * (j - max)
}
if(j > max)
y[j] = 0
}
}
plot(y, main = paste(adj_depths$EwE_num[i], adj_depths$EwE_name[i]),
type = 'l', lwd = 1, col = 'red', cex.main = 1,
ylab = '', xlab = '', bty = 'n')
}
dev.off()
## Plot depth with depth standardized (500 m) X-axis  --------------------------
factor = 1.5
w = 11 * factor
h = 8.5 * factor
png("./out/Depth_preferences_standardized-x-axis.png", width = w, height = h, units = 'in', res = 600)
par(mfrow = c(6, 10), adj=0)
for (i in 1:nrow(adj_depths)){
min = as.numeric(adj_depths$min[i])
q1  = as.numeric(adj_depths$q1[i])
q2  = as.numeric(adj_depths$q2[i])
max = as.numeric(adj_depths$max[i])
y = integer(500)
for(j in 1:length(y)){
if(j < min)
y[j] = 0
else {
if(j < q1 & adj_depths$no_lower_limit[i] == 'y')
y[j] = 1
if(j < q1 & adj_depths$no_lower_limit[i] == 'n') {
dx = q1 - min
y[j] = 1 / dx * (j - min)
}
if (j >= q1 & j <= q2)
y[j] = 1
if (j > q2 ) {
dx = max - q2
y[j] = - 1/dx * (j - max)
}
if(j > max)
y[j] = 0
}
}
plot(y, main = paste(adj_depths$EwE_num[i], adj_depths$EwE_name[i]),
type = 'l', lwd = 1, col = 'blue', cex.main = 1,
ylab = '', xlab = '', bty = 'n')
}
dev.off()
png("./Ecospace-preference-functions/plot-depth-pref_standardized-x-axis.png", width = w, height = h, units = 'in', res = 600)
par(mfrow = c(6, 10), adj=0)
for (i in 1:nrow(adj_depths)){
min = as.numeric(adj_depths$min[i])
q1  = as.numeric(adj_depths$q1[i])
q2  = as.numeric(adj_depths$q2[i])
max = as.numeric(adj_depths$max[i])
y = integer(500)
for(j in 1:length(y)){
if(j < min)
y[j] = 0
else {
if(j < q1 & adj_depths$no_lower_limit[i] == 'y')
y[j] = 1
if(j < q1 & adj_depths$no_lower_limit[i] == 'n') {
dx = q1 - min
y[j] = 1 / dx * (j - min)
}
if (j >= q1 & j <= q2)
y[j] = 1
if (j > q2 ) {
dx = max - q2
y[j] = - 1/dx * (j - max)
}
if(j > max)
y[j] = 0
}
}
plot(y, main = paste(adj_depths$EwE_num[i], adj_depths$EwE_name[i]),
type = 'l', lwd = 1, col = 'blue', cex.main = 1,
ylab = '', xlab = '', bty = 'n')
}
dev.off()
# Plot depth with varying X-axis (depth) --------------------------------------
factor = 1.5
w = 11 * factor
h = 8.5 * factor
png("./Ecospace-preference-functions/figures/plot-depth-pref_vary-x-axis.png", width = w, height = h, units = 'in', res = 600)
par(mfrow = c(6, 10), adj=0)
for (i in 1:nrow(adj_depths)){
min = as.numeric(adj_depths$min[i])
q1  = as.numeric(adj_depths$q1[i])
q2  = as.numeric(adj_depths$q2[i])
max = as.numeric(adj_depths$max[i])
y = integer(max * 1.15)
for(j in 1:length(y)){
if(j < min)
y[j] = 0
else {
if(j < q1 & adj_depths$no_lower_limit[i] == 'y')
y[j] = 1
if(j < q1 & adj_depths$no_lower_limit[i] == 'n') {
dx = q1 - min
y[j] = 1 / dx * (j - min)
}
if (j >= q1 & j <= q2)
y[j] = 1
if (j > q2 ) {
dx = max - q2
y[j] = - 1/dx * (j - max)
}
if(j > max)
y[j] = 0
}
}
plot(y, main = paste(adj_depths$EwE_num[i], adj_depths$EwE_name[i]),
type = 'l', lwd = 1, col = 'red', cex.main = 1,
ylab = '', xlab = '', bty = 'n')
}
dev.off()
## Plot depth with depth standardized (500 m) X-axis  --------------------------
factor = 1.5
w = 11 * factor
h = 8.5 * factor
png("./Ecospace-preference-functions/figures/plot-depth-pref_standardized-x-axis.png", width = w, height = h, units = 'in', res = 600)
par(mfrow = c(6, 10), adj=0)
for (i in 1:nrow(adj_depths)){
min = as.numeric(adj_depths$min[i])
q1  = as.numeric(adj_depths$q1[i])
q2  = as.numeric(adj_depths$q2[i])
max = as.numeric(adj_depths$max[i])
y = integer(500)
for(j in 1:length(y)){
if(j < min)
y[j] = 0
else {
if(j < q1 & adj_depths$no_lower_limit[i] == 'y')
y[j] = 1
if(j < q1 & adj_depths$no_lower_limit[i] == 'n') {
dx = q1 - min
y[j] = 1 / dx * (j - min)
}
if (j >= q1 & j <= q2)
y[j] = 1
if (j > q2 ) {
dx = max - q2
y[j] = - 1/dx * (j - max)
}
if(j > max)
y[j] = 0
}
}
plot(y, main = paste(adj_depths$EwE_num[i], adj_depths$EwE_name[i]),
type = 'l', lwd = 1, col = 'blue', cex.main = 1,
ylab = '', xlab = '', bty = 'n')
}
dev.off()
rm(list=ls());graphics.off();rm(.SavedPlots);gc();windows(record=T)
library('marmap')
library('raster')
## Set up parameters
bbox = c(-98,-80.5, 24,31)
## Set up parameters
bbox = c(-98,-80.5, 24,31)
?as.raster
?marmap::as.raster
## Get depths and make rasters with different grid-cell resolutions
depth04 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[1])) #get data from NOAA server and put into raster
resolutions = c(4, 8, 16, 32)
## Get depths and make rasters with different grid-cell resolutions
depth04 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[1])) #get data from NOAA server and put into raster
depth04[depth04 > 0] = NA; depth04 = depth04 * -1 # replace land with NA and make depth positive
depth08 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[2]))
depth08[depth08 > 0] = NA; depth08 = depth08 * -1 # replace land with NA and make depth positive
depth16 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[3]))
depth16[depth16 > 0] = NA; depth16 = depth16 * -1 # replace land with NA and make depth positive
depth32 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[4]))
depth32[depth32 > 0] = NA; depth32 = depth32 * -1 # replace land with NA and make depth positive
depth_list = list(depth04, depth08, depth16, depth32)
for (depth in depth_list){
#get surface area of each cell in km2
cellarea.km2 = getValues(area(depth))
#plot
plot(depth,colNA='black',main=paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2]))
}
dev.off()
dir.depth = "./Ecospace-habitat-maps/Depth_maps/"
dir_depth = "./Ecospace-habitat-maps/Depth_maps/"
## Make figures of different resolutions ---------------------------------------
png(paste0(dir_depth, "4depthmaps-res-04-08-16-32-min.png"), width = 6, height = 6, units = "in", res = 1000)
par(mfrow=c(2,2))
for (depth in depth_list){
#get surface area of each cell in km2
cellarea.km2 = getValues(area(depth))
#plot
plot(depth,colNA='black',main=paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2]))
}
dev.off()
## Make figures of different resolutions ---------------------------------------
png(paste0(dir_depth, "4depthmaps-res-04-08-16-32-min.png"), width = 9, height = 6, units = "in", res = 1000)
par(mfrow=c(2,2))
for (depth in depth_list){
#get surface area of each cell in km2
cellarea.km2 = getValues(area(depth))
#plot
plot(depth,colNA='black',main=paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2]))
}
dev.off()
## Make figures of different resolutions ---------------------------------------
png(paste0(dir_depth, "4depthmaps-res-04-08-16-32-min.png"), width = 9.5, height = 6, units = "in", res = 1000)
par(mfrow=c(2,2))
for (depth in depth_list){
#get surface area of each cell in km2
cellarea.km2 = getValues(area(depth))
#plot
plot(depth,colNA='black', main=paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2]))
}
dev.off()
## Make figures of different resolutions ---------------------------------------
png(paste0(dir_depth, "4depthmaps-res-04-08-16-32-min.png"), width = 9.5, height = 6, units = "in", res = 2000)
par(mfrow=c(2,2))
for (depth in depth_list){
#get surface area of each cell in km2
cellarea.km2 = getValues(area(depth))
#plot
plot(depth,colNA='black', main=paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2]))
}
dev.off()
## Make figures of different resolutions ---------------------------------------
png(paste0(dir_depth, "4depthmaps-res-04-08-16-32-min.png"), width = 9.5, height = 6, units = "in", res = 1600)
par(mfrow=c(2,2))
for (depth in depth_list){
#get surface area of each cell in km2
cellarea.km2 = getValues(area(depth))
#plot
plot(depth,colNA='black', main=paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2]))
}
dev.off()
getValues(area(depth))
round(res(depth)[1]*60,0
paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2])
depth
paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2])
dims = paste0(dim(depth)[1],'x',dim(depth)[2]))
dims = paste0(dim(depth)[1],'x',dim(depth)[2])
dims
min = paste0(round(res(depth)[1]*60,0),' min.')
min
cellarea_km2 = sqrt(mean(getValues(area(depth))) ## Get surface area of each cell in km2
paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ', dims)
plot(depth,colNA='black', main = paste0(round(res(depth)[1]*60,0),' min. / ~', round(sqrt(mean(cellarea.km2))),' km / ',dim(depth)[1],'x',dim(depth)[2]))
}
dev.off()
## Export maps as ascii file for (depth in depth_list){
cellarea.km2 = getValues(area(depth))
map_name = paste0('depth ', round(res(depth)[1]*60,0),'min ', round(sqrt(mean(cellarea.km2))),'km ', dim(depth)[1],'x',dim(depth)[2], '.asc')
writeRaster(depth, paste0(dir.depth, map_name), format='ascii', NAflag=0, overwrite=F)
################################################################################
##
## Make W. Atlantic and Okachobee land/NA
res    = "depth 4min 7km 105x262"
depth  = raster(paste0(dir.depth, res, ".asc"))
summary(depth); plot(depth, colNA = 'black')
#depth[depth<=0]  = NA
## Make W. Atlantic and Lake Okachobee NA
NEcorner         = extent(-82,-80,28,31)
Okachobee        = extent(-81.5,-80,26,27)
depth[NEcorner]  = NA
depth[Okachobee] = NA
#midGoMx          = extent(-90, -86, 24, 25)
## Plot map and log 10 depth
png(paste0(dir.depth, res, ".png"), width = 6, height = 8.5, units = "in", res = 1500)
par(mfrow = c(2,1))
plot(depth, colNA='black', col = topo.colors(30, rev=T))
plot(log10(depth), colNA='black', col = topo.colors(30, rev=T))
dev.off()
## Write out maps
writeRaster(depth, paste0(dir.depth, res, "GoMxLMEM"), format='ascii', NAflag=0, overwrite=T)
writeRaster(log10(depth), paste0(dir.depth, res, "log10 GoMxLMEM"), format='ascii', NAflag=0, overwrite=T)
sqrt(mean(getValues(area(depth))))
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth)))))) ## Get surface area of each cell in km2
cellarea_km2
es(depth)[1]*60,0)
res(depth)[1]*60,0)
res(depth)[1]
depth
## Get paramaters of depth map
min = paste0(round(res(depth)[1]*60,0),' min.')
dims = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth)))))) ## Get surface area of each cell in km2
cellarea_km2
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth))))), ' km2') ## Get surface area of each cell in km2
cellarea_km2
paste(min, dims, cellarea_km2, sep = ' / ')
paste(min, cellarea_km2, dims, sep = ' / ')
min = paste0(round(res(depth)[1]*60,0),'min.')
dims = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth))))), 'km2') ## Get surface area of each cell in km2
paste(min, cellarea_km2, dims, sep = ' / ')
## Get paramaters of depth map
min = paste0(round(res(depth)[1]*60,0),'min.')
dims = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth))))), 'sq.km') ## Get surface area of each cell in km2
paste(min, cellarea_km2, dims, sep = ' / ')
png(paste0(dir_depth, "4depthmaps-res-04-08-16-32-min.png"), width = 9.5, height = 6, units = "in", res = 1600)
par(mfrow=c(2,2))
for (depth in depth_list){
## Get paramaters of depth map
min = paste0(round(res(depth)[1]*60,0),'min.')
dims = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth))))), 'sq.km') ## Get surface area of each cell in km2
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '))
}
dev.off()
for (depth in depth_list){
## Get paramaters of depth map
min = paste0(round(res(depth)[1]*60,0),' min.')
dims = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth))))), ' sq.km') ## Get surface area of each cell in km2
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '))
}
dev.off()
map_params   = paste0(min, cellarea_km2, dims)
map_params
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste0(min, cellarea_km2, dims)
map_params   = paste0(min, cellarea_km2, dims); map_params
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## Export maps as ascii files---------------------------------------
for (depth in depth_list){
## Get paramaters of depth map
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## Write out ASCII
writeRaster(depth, paste0(dir_depth, '/ASCII/depthmap_'), format='ascii', NAflag=0, overwrite=T)
}
## Export maps as ascii files---------------------------------------
for (depth in depth_list){
## Get paramaters of depth map
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## Write out ASCII
writeRaster(depth, paste0(dir_depth, '/ASCII/depthmap_', map_params), format='ascii', NAflag=0, overwrite=T)
}
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
paste0(dir_depth, "log10depth_", map_params, ".png")
png(paste0(dir_depth, "log10_depthmap_", map_params, ".png"), width = 6, height = 8.5, units = "in", res = 1600)
par(mfrow = c(2,1))
plot(depth, colNA='black', col = topo.colors(30, rev=T))
plot(log10(depth), colNA='black', col = topo.colors(30, rev=T))
dev.off()
source("C:/Users/holdenharris/OneDrive - University of Florida/Research/24 Gulfwide EwE/IEA-GWEM-DataSynth/Ecospace-habitat-maps/Make_depth_maps.R", echo=TRUE)
depth = depth08
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## Plot map and log 10 depth
png(paste0(dir_depth, "log10_depthmap_", map_params, ".png"), width = 6, height = 8.5, units = "in", res = 1600)
par(mfrow = c(2,1))
plot(depth, colNA='black', col = topo.colors(30, rev=T))
plot(log10(depth), colNA='black', col = topo.colors(30, rev=T))
dev.off()
################################################################################
## --Reference for MARMAP--
## Pante E, Simon-Bouhet B (2013) marmap: A Package for Importing, Plotting and
## Analyzing Bathymetric and Topographic Data in R. PLoS ONE 8(9): e73051.
## doi:10.1371/journal.pone.0073051
rm(list=ls());graphics.off();rm(.SavedPlots);gc();windows(record=T)
library('marmap')
library('raster')
dir_depth = "./Ecospace-habitat-maps/Depth_maps/"
## Set up parameters
bbox = c(-98,-80.5, 24,31) ## (xmin, xmax, ymin, ymax)
resolutions = c(4, 8, 16, 32) ## In lat. minutes
## Get depths and make rasters with different grid-cell resolutions
depth04 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[1])) #get data from NOAA server and put into raster
depth04[depth04 > 0] = NA; depth04 = depth04 * -1 # replace land with NA and make depth positive
depth08 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[2]))
depth08[depth08 > 0] = NA; depth08 = depth08 * -1 # replace land with NA and make depth positive
depth16 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[3]))
depth16[depth16 > 0] = NA; depth16 = depth16 * -1 # replace land with NA and make depth positive
depth32 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[4]))
depth32[depth32 > 0] = NA; depth32 = depth32 * -1 # replace land with NA and make depth positive
depth_list = list(depth04, depth08, depth16, depth32)
## Make figures of different resolutions ---------------------------------------
png(paste0(dir_depth, "4depthmaps-res-04-08-16-32-min.png"), width = 9.5, height = 6, units = "in", res = 1600)
par(mfrow=c(2,2))
for (depth in depth_list){
## Get paramaters of depth map
min = paste0(round(res(depth)[1]*60,0),' min.')
dims = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth))))), ' sq.km') ## Get surface area of each cell in km2
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '))
}
dev.off()
## Export maps as ascii files---------------------------------------------------
for (depth in depth_list){
## Get paramaters of depth map
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## Write out ASCII
writeRaster(depth, paste0(dir_depth, '/ASCII/depthmap_', map_params), format='ascii', NAflag=0, overwrite=T)
}
## -----------------------------------------------------------------------------
## Use 08 min resolution for Ecospace
depth = depth08
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## Plot map and log 10 depth
png(paste0(dir_depth, "log10_depthmap_", map_params, ".png"), width = 6, height = 8.5, units = "in", res = 1600)
par(mfrow = c(2,1))
plot(depth, colNA='black', col = topo.colors(30, rev=T))
plot(log10(depth), colNA='black', col = topo.colors(30, rev=T))
dev.off()
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '))
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(60, rev=T))
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(100, rev=T))
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(10, rev=T))
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(1000, rev=T))
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(100, rev=T))
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(30, rev=T))
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(60, rev=T))
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(30, rev=T))
png(paste0(dir_depth, "4depthmaps-res-04-08-16-32-min.png"), width = 9.5, height = 6, units = "in", res = 1600)
par(mfrow=c(2,2))
for (depth in depth_list){
## Get paramaters of depth map
min = paste0(round(res(depth)[1]*60,0),' min.')
dims = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth))))), ' sq.km') ## Get surface area of each cell in km2
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(30, rev=T))
}
dev.off()
## Plot map and log 10 depth
png(paste0(dir_depth, "log10_depthmap_", map_params, ".png"), width = 6, height = 8.5, units = "in", res = 1600)
par(mfrow = c(2,1))
plot(depth, colNA='black', col = topo.colors(30, rev=T))
plot(log10(depth), colNA='black', col = topo.colors(30, rev=T))
dev.off()
## -----------------------------------------------------------------------------
## Use 08 min resolution for Ecospace
depth = depth08
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## Plot map and log 10 depth
png(paste0(dir_depth, "log10_depthmap_", map_params, ".png"), width = 6, height = 8.5, units = "in", res = 1600)
par(mfrow = c(2,1))
plot(depth, colNA='black', col = topo.colors(30, rev=T))
plot(log10(depth), colNA='black', col = topo.colors(30, rev=T))
dev.off()
## -----------------------------------------------------------------------------
## Use 08 min resolution for Ecospace
depth = depth08
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## Plot map and log 10 depth
png(paste0(dir_depth, "log10_depthmap_", map_params, ".png"), width = 7, height = 8.5, units = "in", res = 1600)
par(mfrow = c(2,1))
plot(depth, colNA='black', col = topo.colors(30, rev=T))
plot(log10(depth), colNA='black', col = topo.colors(30, rev=T))
dev.off()
## Write out ASCII
writeRaster(depth, paste0(dir_depth, '/ecospace_basemap_', map_params), format='ascii', NAflag=0, overwrite=T)
