fg_name = fg_pref$EwE_name[j],
max = max_temp, scale_xaxis = 'y',
range = 'wide',
driver = "Temp")
}
}
## Temperature -----------------------------------------------------------------
pdf(paste0(dir_pdf, "Temp-pref-funcs_xaxis-scaled.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$TempMin[j], fg_pref$TempPrefMin[j],
fg_pref$TempPrefMax[j], fg_pref$TempMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_temp, scale_xaxis = 'y',
range = 'wide',
driver = "Temp")
}
}
dev.off()
pdf(paste0(dir_pdf, "Temp-pref-funcs_xaxis-set.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$TempMin[j], fg_pref$TempPrefMin[j],
fg_pref$TempPrefMax[j], fg_pref$TempMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_temp, scale_xaxis = 'n',
range = 'wide',
driver = "Temp")
}
}
dev.off()
## Plot depth ------------------------------------------------------------------
n_rows = n_cols = 5
n_plots = nrow(fg_pref)
pdf(paste0(dir_pdf, "Depth-pref-funcs_xaxis-scaled.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$DepthMin[j], fg_pref$DepthPrefMin[j],
fg_pref$DepthPrefMax[j], fg_pref$DepthMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_depth, scale_xaxis = 'n',
range = 'wide',
driver = "Depth")
}
}
dev.off()
## Plot depth ------------------------------------------------------------------
n_rows = n_cols = 5
n_plots = nrow(fg_pref)
pdf(paste0(dir_pdf, "Depth-pref-funcs_xaxis-scaled.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$DepthMin[j], fg_pref$DepthPrefMin[j],
fg_pref$DepthPrefMax[j], fg_pref$DepthMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_depth, scale_xaxis = 'n',
range = 'wide',
driver = "Depth")
}
}
dev.off()
pdf(paste0(dir_pdf, "Depth-pref-funcs_xaxis-scaled.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$DepthMin[j], fg_pref$DepthPrefMin[j],
fg_pref$DepthPrefMax[j], fg_pref$DepthMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_depth, scale_xaxis = 'y',
range = 'wide',
driver = "Depth")
}
}
dev.off(); dev.off()
pdf(paste0(dir_pdf, "Depth-pref-funcs_xaxis-set.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$DepthMin[j], fg_pref$DepthPrefMin[j],
fg_pref$DepthPrefMax[j], fg_pref$DepthMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_depth, scale_xaxis = 'n',
range = 'wide',
driver = "Depth")
}
}
dev.off(); dev.off()
dev.off()
## Temperature -----------------------------------------------------------------
pdf(paste0(dir_pdf, "Temp-pref-funcs_xaxis-scaled.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$TempMin[j], fg_pref$TempPrefMin[j],
fg_pref$TempPrefMax[j], fg_pref$TempMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_temp, scale_xaxis = 'y',
range = 'nar',
driver = "Temp")
}
}
dev.off()
dev.off()
pdf(paste0(dir_pdf, "Temp-pref-funcs_xaxis-set.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$TempMin[j], fg_pref$TempPrefMin[j],
fg_pref$TempPrefMax[j], fg_pref$TempMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_temp, scale_xaxis = 'n',
range = 'nar',
driver = "Temp")
}
}
dev.off()
dev.off()
## Salinity --------------------------------------------------------------------
pdf(paste0(dir_pdf, "Sal-pref-funcs_xaxis-scaled.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$SalinityMin[j], fg_pref$SalinityPrefMin[j],
fg_pref$SalinityPrefMax[j], fg_pref$SalinityMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_sal, scale_xaxis = 'y',
range = 'nar',
driver = "Sal")
}
}
dev.off()
pdf(paste0(dir_pdf, "Sal-pref-funcs_xaxis-set.pdf"), width = w, height = h, onefile = T)
for(i in seq(from = 1, to = n_plots, by = pg_plts)) {
par(mfrow=c(n_rows, n_cols))
for(j in seq(from = i, to = i+(n_rows * n_cols - 1))) {
plot_pref_func(fg_pref$SalinityMin[j], fg_pref$SalinityPrefMin[j],
fg_pref$SalinityPrefMax[j], fg_pref$SalinityMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = max_sal, scale_xaxis = 'n',
range = 'nar',
driver = "Sal")
}
}
dev.off()
## Test preference functions -------------------------
fg_pref <- read.csv("./Ecospace-preference-functions/intermediate-ouput/fg-env-preference-parameters-adjusted.csv")
j = 65 ## Can be set to any functional group. Shrimp are a good one to see responses.
par(mfrow=c(1,3))
plot_pref_func(fg_pref$DepthMin[j], fg_pref$DepthPrefMin[j],
fg_pref$DepthPrefMax[j], fg_pref$DepthMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = 400, scale_xaxis = 'y', range = 'wide',
driver = "Depth")
plot_pref_func(fg_pref$TempMin[j], fg_pref$TempPrefMin[j],
fg_pref$TempPrefMax[j], fg_pref$TempMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = 40, scale_xaxis = 'y', range = 'nar',
driver = "Temp")
plot_pref_func(fg_pref$SalinityMin[j], fg_pref$SalinityPrefMin[j],
fg_pref$SalinityPrefMax[j], fg_pref$SalinityMax[j],
fg_num = fg_pref$EwE_num[j],
fg_name = fg_pref$EwE_name[j],
max = 40, scale_xaxis = 'y', range = 'nar',
driver = "Sal")
rm(list=ls()); gc(); windows()
library(dplyr)
## Set up and merge databases
fishbase = read.csv("./global-data/fishbaseSppEcolMatrix.csv")
fishbase = fishbase[, c('Sciname', 'AspectRatio', 'CommonLength')]
fishbase$Sciname = tolower(fishbase$Sciname)
fg = read.csv("./global-data/speciesListGoM.csv") ## 'fg' represents Ecospace functional groups
fg = read.csv("./global-data/speciesListGoM_QAQC_AMkeys.csv") ## 'fg' represents Ecospace functional groups
fg$Sciname = tolower(fg$Sciname)
disp = merge(fg, fishbase, by = 'Sciname', all.x = TRUE)
## Clean up data frame
disp = disp %>% drop_na(Sciname, AspectRatio, CommonLength)
disp = disp[order(disp$EwE_num), ]
library(dplyr)
library(tidyverse)
## Set up and merge databases
fishbase = read.csv("./global-data/fishbaseSppEcolMatrix.csv")
fishbase = fishbase[, c('Sciname', 'AspectRatio', 'CommonLength')]
fishbase$Sciname = tolower(fishbase$Sciname)
fg = read.csv("./global-data/speciesListGoM_QAQC_AMkeys.csv") ## 'fg' represents Ecospace functional groups
fg$Sciname = tolower(fg$Sciname)
disp = merge(fg, fishbase, by = 'Sciname', all.x = TRUE)
## Clean up data frame
disp = disp %>% drop_na(Sciname, AspectRatio, CommonLength)
disp = disp[order(disp$EwE_num), ]
disp = disp[!duplicated(disp$Sciname),]
write.csv(disp, "./Ecospace-dispersal-rates/intermediate-output/base-swim-speed.csv", row.names = FALSE)
scaled = read.csv("./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.csv")
## Aggregate
dispersal_table = scaled %>%
group_by(EwE_num, EwE_name) %>%
summarise(
Scaled_dispersal = mean(Scaled_avg),
n_spp = n(),
SD = sd(Scaled_avg),
)
dispersal_table
dispersal_table
`print(n = 67)`
`print(n = 68)`
`print(n = 46)`
`print(dispersal_table, n = 46)`
install.packages("knitr")
install.packages(c("readr", "knitr"))
install.packages(c("readr", "knitr"))
rm(list=ls()); gc(); windows()
library(dplyr)
library(tidyverse)
## Set up and merge databases
fishbase = read.csv("./global-data/fishbaseSppEcolMatrix.csv")
fishbase = fishbase[, c('Sciname', 'AspectRatio', 'CommonLength')]
fishbase$Sciname = tolower(fishbase$Sciname)
fg = read.csv("./global-data/speciesListGoM_QAQC_AMkeys.csv") ## 'fg' represents Ecospace functional groups
fg$Sciname = tolower(fg$Sciname)
disp = merge(fg, fishbase, by = 'Sciname', all.x = TRUE)
## Clean up data frame
disp = disp %>% drop_na(Sciname, AspectRatio, CommonLength)
disp = disp[order(disp$EwE_num), ]
disp = disp[!duplicated(disp$Sciname),]
write.csv(disp, "./Ecospace-dispersal-rates/intermediate-output/base-swim-speed.csv", row.names = FALSE)
## Scaled dispersal rates calculated in Excel workbook:
## First, base swim speeds estimated with equation
##   = 10^(-0.828+0.6196*LOG10(CommonLength)+0.3478*LOG10(AspectRatio)+0.7261*SwimMode)
##   Equation fom VC Sambilay Jr. 1990. Interrelationships between swimming speed,
##   caudal fin aspect ratio and body length of fishes. International Center for Living Aquatic Resources Management.
## Second, swim speeds are scaled to dispersal rates for known species
scaled = read.csv("./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.csv")
## Aggregate
dispersal_table = scaled %>%
group_by(EwE_num, EwE_name) %>%
summarise(
Scaled_dispersal = mean(Scaled_avg),
n_spp = n(),
SD = sd(Scaled_avg),
)
## Write out markdown table
library(knitr)
dispersal_md <- kable(dispersal_table, format = "markdown")
writeLines(dispersal_md, "dispersal_table.md")
writeLines(dispersal_md, "./Ecospace-dispersal-rates/output-for-Ecospace/dispersal_table.md")
writeLines(dispersal_md, "./Ecospace-dispersal-rates/output-for-Ecospace/scaled-dispersal-rates-all-spp.md")
## Write out markdown table
library(knitr)
dispersal_md <- kable(dispersal_table, format = "markdown")
writeLines(dispersal_md, "./Ecospace-dispersal-rates/output-for-Ecospace/dispersal_table.md")
writeLines(dispersal_md, "./Ecospace-dispersal-rates/output-for-Ecospace/scaled-dispersal-rates-all-spp.md")
writeLines(dispersal_md, "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
writeLines(scaled, "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled
writeLines(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
View(scaled)
table(scaled)
scaled
as.character(scaled)
writeLines(as.character(scaled),       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
writeLines(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
?writeLines
as.tibble(scaled)
writeLines(as.tibble(scaled),       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
write.table(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
writeLines(dispersal_md, "./Ecospace-dispersal-rates/output-for-Ecospace/dispersal_table.md")
scaled_md <- kable(scaled, format = "markdown")
write.table(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- kable(scaled, format = "markdown")
write.table(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- kable(scaled, format = "markdown")
write.table(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- capture.output(kable(scaled, format = "markdown"))
write.table(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- capture.output(kable(scaled, format = "markdown"))
write.table(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
library(kableExtra)
install.packages("kableExtra")
scaled_md <- capture.output(kable(scaled, format = "pipe"))
scaled_md
dispersal_md <- kable(dispersal_table, format = "markdown")
dispersal_md
write.table(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- capture.output(kable(scaled, format = "pipe"))
write.table(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- kable(scaled, format = "markdown")
scaled_md
#scaled_md <- capture.output(kable(scaled, format = "pipe"))
scaled_md <- kable(scaled, format = "markdown")
writeLines(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
#scaled_md <- capture.output(kable(scaled, format = "pipe"))
scaled_md <- capture.output(kable(scaled, format = "markdown"))
scaled_md
writeLines(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- capture.output(kable(scaled, format = "pipe"))
scaled_md
#scaled_md <- capture.output(kable(scaled, format = "markdown"))
writeLines(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- capture.output(kable(scaled, format = "pipe")) %>% kable_styling()
library(kableExtra)
scaled_md <- capture.output(kable(scaled, format = "pipe")) %>% kable_styling()
scaled_md <- capture.output(kable(scaled, format = "pipe", col.names = colnames(scaled))) %>% kable_styling()
scaled_md <- capture.output(kable(scaled, format = "pipe")) %>% kable_styling()
scaled_md <- capture.output(kable(scaled, format = "pipe")) %>% kable_styling()
scaled_md <- capture.output(kable(scaled, format = "pipe"))
#scaled_md <- capture.output(kable(scaled, format = "markdown"))
writeLines(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- capture.output(kable(scaled, format = "markdown"))
scaled_md
#scaled_md <- capture.output(kable(scaled, format = "markdown"))
writeLines(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
scaled_md <- capture.output(kable(as.tibble(scaled), format = "markdown"))
scaled_md
writeLines(scaled,       "./Ecospace-dispersal-rates/intermediate-output/scaled-dispersal-rates-all-spp.md")
rm(list=ls()); graphics.off()
library('marmap')
library('raster')
dir_depth = "./Ecospace-habitat-maps/Depth_maps/ASCII/"
## Parameters: bounded area and resoluations
bbox = c(-98,-80.5, 24,31)    ## xmin, xmax, ymin, ymax
windows()
## Parameters: bounded area and resoluations
bbox = c(-98,-80.5, 24,31)    ## xmin, xmax, ymin, ymax
resolutions = c(4, 8, 16, 32) ## In lat. minutes
## Get depths and make rasters with different grid-cell resolutions
depth04 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[1])) #get data from NOAA server and put into raster
depth04[depth04 > 0] = NA; depth04 = depth04 * -1 # replace land with NA and make depth positive
depth08 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[2]))
depth08[depth08 > 0] = NA; depth08 = depth08 * -1 # replace land with NA and make depth positive
depth16 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[3]))
depth16[depth16 > 0] = NA; depth16 = depth16 * -1 # replace land with NA and make depth positive
depth32 = marmap::as.raster(getNOAA.bathy(bbox[1], bbox[2], bbox[3], bbox[4], resolution = resolutions[4]))
depth32[depth32 > 0] = NA; depth32 = depth32 * -1 # replace land with NA and make depth positive
depth_list = list(depth04, depth08, depth16, depth32)
par(mfrow=c(2,2))
for (depth in depth_list){
## Get paramaters of depth map
min         = paste0(round(res(depth)[1]*60,0),' min.')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0('~', round(sqrt(mean(getValues(area(depth))))), ' sq.km') ## Get surface area of each cell in km2
## Plot
plot(depth,colNA='black', main =paste(min, cellarea_km2, dims, sep = ' / '),
col = topo.colors(30, rev=T))
}
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
## -----------------------------------------------------------------------------
## Use 08 min resolution for Ecospace
depth = depth08
min          = paste0(round(res(depth)[1]*60,0),'min')
dims         = paste0(dim(depth)[1],'x',dim(depth)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
par(mfrow = c(2,1))
plot(depth, colNA='black', col = topo.colors(30, rev=T))
plot(log10(depth), colNA='black', col = topo.colors(30, rev=T))
## -----------------------------------------------------------------------------
## Set max depth for Ecospace base map
depth_maxed <- raster("./global-data/shorelinecorrected-basemap-depth-131x53-08 min-14sqkm.asc")
depth_maxed[depth_maxed > 400] = 400 ## Make all cells over 400 m deep equal to 400 m
min          = paste0(round(res(depth_maxed)[1]*60,0),'min')
dims         = paste0(dim(depth_maxed)[1],'x',dim(depth_maxed)[2])
cellarea_km2 = paste0(round(sqrt(mean(getValues(area(depth_maxed))))), 'sqkm') ## Get surface area of each cell in km2
map_params   = paste(min, cellarea_km2, dims, sep='-'); map_params
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, colNA = "gray", col = topo.colors(30, rev=T))
par(mfrow = c(1,1))
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, colNA = "darkgray", col = topo.colors(30, rev=T))
plot(depth_maxed, main = "GoM Depth", colNA = "darkgray", col = topo.colors(30, rev=T))
plot(depth_maxed, main = "US Gulf-wide Depth / Base Map", colNA = "darkgray", col = topo.colors(30, rev=T))
png(paste0(dir_depth, "Depthmap_", map_params, ".png"), width = 7, height = 4, units = "in", res = 1600)
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, main = "US Gulf-wide Depth / Base Map", colNA = "darkgray", col = topo.colors(30, rev=T))
dev.off()
dir_depth
dir_depth = "./Ecospace-habitat-maps/Depth_maps/"
png(paste0(dir_depth, "Depthmap_", map_params, ".png"), width = 7, height = 4, units = "in", res = 1600)
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, main = "US Gulf-wide Depth / Base Map", colNA = "darkgray", col = topo.colors(30, rev=T))
dev.off()
png(paste0(dir_depth, "Depthmap_", map_params, ".png"), width = 7, height = 4, units = "in", res = 2500)
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, main = "US Gulf-wide Depth / Base Map", colNA = "darkgray", col = topo.colors(30, rev=T))
dev.off()
png(paste0(dir_depth, "Depthmap_", map_params, ".png"), width = 8.5, height = 5, units = "in", res = 2500)
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, main = "US Gulf-wide Depth / Base Map", colNA = "darkgray", col = topo.colors(30, rev=T))
dev.off()
png(paste0(dir_depth, "Depthmap_", map_params, ".png"), width = 9, height = 5, units = "in", res = 2500)
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, main = "US Gulf-wide Depth / Base Map", colNA = "darkgray", col = topo.colors(30, rev=T))
dev.off()
png(paste0(dir_depth, "Depthmap_", map_params, ".png"), width = 9, height = 5, units = "in", res = 2400)
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, main = "US Gulf-wide Depth / Base Map", colNA = "darkgray", col = topo.colors(30, rev=T))
dev.off()
png(paste0(dir_depth, "Depthmap_", map_params, ".png"), width = 9, height = 5, units = "in", res = 2000)
depth_maxed[depth_maxed == 0] = NA
plot(depth_maxed, main = "US Gulf-wide Depth / Base Map", colNA = "darkgray", col = topo.colors(30, rev=T))
dev.off()
rm(list=ls()); graphics.off(); windows()
library(sf)
library(ggplot2)
library(raster)
library(cowplot)
dir_in = "./Ecospace-habitat-maps/Data-inputs/GRSC-hardbottom-maps/"
dir_out = "./Ecospace-habitat-maps/Output-for-ecospace/"
dir_fig = "./Ecospace-habitat-maps/Figures/"
## Shape files
hb  = st_read(paste0(dir_in, "hardbottom_proj.shp"))
ars = st_read(paste0(dir_in, "Artificial_Reefs.shp"))
wrecks = st_read(paste0(dir_in, "AWOIS_Wrecks.shp"))
platforms = st_read(paste0(dir_in, "Working_Platforms.shp"))
## Plot shape files ------------------------------------------------------------
plot_hb <-
hb %>% ggplot() +
geom_sf(color="black", fill="gray") +
ggtitle("Hardbottom Projection")
plot_ars <-
ars %>% ggplot() +
geom_sf() +
ggtitle("Artificial Reefs")
plot_wrecks <-
wrecks %>% ggplot() +
geom_sf() +
ggtitle("AWOIS Wrecks")
plot_platforms <-
platforms %>% ggplot() +
geom_sf() +
ggtitle("Working Platforms")
plot_grid(plot_hb, plot_ars, plot_wrecks, plot_platforms, nrow = 2)
## Read in rasters
dist_to_AR = raster(paste0(dir_in, "dist_to_AR"))
dist_to_HB = raster(paste0(dir_in, "dist_to_HB"))
## Read in depth
depth = raster("./global-data/shorelinecorrected-basemap-depth-131x53-08 min-14sqkm.asc")
dim(depth);extent(depth)
## Take inverse distance
inv_AR = calc(dist_to_AR, fun = function(x) {1 / x})
inv_HB = calc(dist_to_HB, fun = function(x) {1 / sqrt(x)})
## Crop to match extent of EwE base/depth map
crop_AR = crop(inv_AR, depth)
crop_HB = crop(inv_HB, depth)
## Resample to match cell size and resolution
resamp_AR = resample(crop_AR, depth) ## takes a few minutes due to raster size
resamp_HB = resample(crop_HB, depth) ## takes a few minutes due to raster size
par(mfrow=c(2,1))
plot(resamp_AR,  main = "ARs (cropped and resampled)", colNA = 'gray')
plot(resamp_HB,  main = "HB (cropped and resampled)", colNA = 'gray')
## Scale to one
scaled_AR = calc(resamp_AR, fun = function(x) {
x / max(values(resamp_AR), na.rm=TRUE)
})
scaled_HB = calc(resamp_HB, fun = function(x) {
x / max(values(resamp_HB), na.rm=TRUE)
})
## Scale to one
scaled_AR = calc(resamp_AR, fun = function(x) {
x / max(values(resamp_AR), na.rm=TRUE)
})
scaled_HB = calc(resamp_HB, fun = function(x) {
x / max(values(resamp_HB), na.rm=TRUE)
})
## Plots ------------------------------------------------------------------------
par(mfrow=c(2,2))
plot(dist_to_AR,  main = "Distance from ARs", colNA = 'gray')
plot(dist_to_HB,  main = "Distance from HB", colNA = 'gray')
plot(scaled_AR,  main = "Artificial reefs (scaled inverse distance)", colNA = 'gray')
plot(scaled_HB,  main = "Hard bottom (scaled inverse squared distance)", colNA = 'gray')
################################################################################
##
## Corals Essential Fish Habitat
shp_corals <- sf::st_read("./Ecospace-habitat-maps/Data-inputs/NCEI-GOM-data-atlas/Corals-EFH/Coral_EFH_GOM.shp")
str(shp_corals)
shp_corals$const = 1
coral_ras <- raster::rasterize(shp_corals, depth, field = "const")
## Write out ASCII files for ecospace
raster::writeRaster(coral_ras, paste0(dir_out, "/coral-hab"),   format = 'ascii', overwrite=TRUE)
## Figure
png(paste0(dir_fig, "Ecospace-coral-hab.png"),
width = 6, height = 4, units = "in", res=1200)
plot(coral_ras, main="Coral habitat")
dev.off()
plot(coral_ras, main="Coral habitat")
################################################################################
##
## HMS
shp_hms <- sf::st_read("./Ecospace-habitat-maps/Data-inputs/NCEI-GOM-data-atlas/HMS-EFH/ahms_efh.shp")
shp_hms$const = 1
plot(shp_hms["DDBOX"])
shp_hms$DDBOX <- as.factor(shp_hms$DDBOX)
bluefin <- subset(shp_hms, shp_hms$DDBOX == "Bluefin Tuna")
plot(bluefin["DDBOX"])
unique(shp_hms$DDBOX)
