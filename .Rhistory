writeRaster(avg.t.surf, paste0(dir.asc.avg,"Avg_temp_surf"), format='ascii', overwrite=T)
writeRaster(avg.t.bot,  paste0(dir.asc.avg,"Avg_temp_bot"),  format='ascii', overwrite=T)
writeRaster(avg.t.avg,  paste0(dir.asc.avg,"Avg_temp_avg"),  format='ascii', overwrite=T)
writeRaster(avg.s.surf, paste0(dir.asc.avg,"Avg_saln_surf"), format='ascii', overwrite=T)
writeRaster(avg.s.bot,  paste0(dir.asc.avg,"Avg_saln_bot"),  format='ascii', overwrite=T)
writeRaster(avg.s.avg,  paste0(dir.asc.avg,"Avg_saln_avg"),  format='ascii', overwrite=T)
hystack <- list(t.surf.smoo, t.bot.smoo, t.avg.smoo, s.surf.smoo, s.bot.smoo, s.avg.smoo)
hystack[1]
rm(hystack)
## Loop along list
hycom_stack_list <- list(t.surf.smoo, t.bot.smoo, t.avg.smoo, s.surf.smoo, s.bot.smoo, s.avg.smoo)
env_dr_list <- c("Temp-surface", "Temp-bottom", "Temp-average", "Sal-surface", "Sal-bottom", "Sal-average")
i = 1
rm(hycom_stack_list)
## Loop along list
smoothed_stack_list <- list(t.surf.smoo, t.bot.smoo, t.avg.smoo, s.surf.smoo, s.bot.smoo, s.avg.smoo)
hires_stack_list    <- list(t.surf.hycom, t.bot.hycom, t.avg.hycom, s.surf.hycom, s.bot.hycom, s.avg.hycom)
env_dr_list <- c("Temp-surface", "Temp-bottom", "Temp-average", "Sal-surface", "Sal-bottom", "Sal-average")
i = 1
# i = 1
## Input parameters-------------------------------------
ras   = smoothed_stack_list[i]
ras
t.surf.smoo
env_driver = env_driver[i]
env_dr_list <- c("Temp-surface", "Temp-bottom", "Temp-average", "Sal-surface", "Sal-bottom", "Sal-average")
env_driver = env_dr_list[i]
env_driver
dir.asc.out = paste0(fld.asc.out, env_driver)
dir.asc.out
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
dir.create(dir.asc.out)
env_dr_list <- c("Temp-surf", "Temp-bot", "Temp-avg", "Sal-surf", "Sal-bot", "Sal-avg")
i = 1
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = t.surf.hycom
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
dir.create(dir.asc.out)
dir.create(dir.asc.out)
for (i in seq_along(hycom_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = t.surf.hycom
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
dir.create(dir.asc.out)
print(paste(env_driver), " - Folder:", dir.asc.out)
}
## Loop along list
smoothed_stack_list <- list(t.surf.smoo, t.bot.smoo, t.avg.smoo, s.surf.smoo, s.bot.smoo, s.avg.smoo)
## Loop along list
smoothed_stack_list <- list(t.surf.smoo, t.bot.smoo, t.avg.smoo, s.surf.smoo, s.bot.smoo, s.avg.smoo)
hires_stack_list    <- list(t.surf.hycom, t.bot.hycom, t.avg.hycom, s.surf.hycom, s.bot.hycom, s.avg.hycom)
env_dr_list <- c("Temp-surf", "Temp-bot", "Temp-avg", "Sal-surf", "Sal-bot", "Sal-avg")
for (i in seq_along(hycom_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
dir.create(dir.asc.out)
print(paste(env_driver), " - Folder:", dir.asc.out)
}
length(smoothed_stack_list)
for (i in 1:length(smoothed_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
dir.create(dir.asc.out)
print(paste(env_driver), " - Folder:", dir.asc.out)
}
i = 1
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
dir.create(dir.asc.out)
for (i in 1:length(smoothed_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
dir.create(dir.asc.out, showWarnings = FALSE)
print(paste(env_driver), " - Folder:", dir.asc.out)
}
for (i in 1:length(smoothed_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste(env_driver), " - Folder:", dir.asc.out)
}
## Loop along list
overwrite <- y
for (i in 1:length(smoothed_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste(env_driver), " - Folder:", dir.asc.out)
}
## Loop along list
overwrite <- 'y'
for (i in 1:length(smoothed_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste(env_driver), " - Folder:", dir.asc.out)
}
i = 1
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
for (i in 1:length(smoothed_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste(env_driver), " - Folder:", dir.asc.out)
}
i = 1
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
env_driver
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
dir.asc.out
print(paste(env_driver, " - Folder:", dir.asc.out))
print(paste(env_driver, "| Folder:", dir.asc.out))
print(paste("Env. driver = ", env_driver, "| Folder:", dir.asc.out))
for (i in 1:length(smoothed_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste("Env. driver = ", env_driver, "| Folder:", dir.asc.out))
}
for (i in 1:length(smoothed_stack_list)){
# i = 1
## Input parameters-------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste("Env. driver = ", env_driver, "| Folder:", dir.asc.out))
}
## Write out files -----------------------------------------------------------
## Make PDF of plots
## Set plotting maximum to maximum of 99th percentile by month
source("./Ecospace-environmental-drivers/0-Make-PDF-maps-function.R")
i = 1
# i = 1
## Input parameters-----------------------------------------------------------
env_driver = env_dr_list[i]
ras   = smoothed_stack_list[i]
hires = hires_stack_list[i]
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste("Env. driver = ", env_driver, "| Folder:", dir.asc.out))
## Make dataframe of dates from raster layers --------------------------------
ras.dates = data.frame(year=substr(names(hires),2,5),month=substr(names(hires),7,8))
ras.dates$yrmo = paste0(ras.dates$year, "-", ras.dates$month)
head(ras.dates); tail(ras.dates)
ras.dates$yrmo = paste0(ras.dates$year, "-", ras.dates$month)
## Make dataframe of dates from raster layers --------------------------------
ras.dates = data.frame(year=substr(names(hires),2,5),month=substr(names(hires),7,8))
ras.dates
hires = hires_stack_list[i]
hires
names(hires)
hires = stack(hires_stack_list[i])
hires
## Make dataframe of dates from raster layers --------------------------------
ras.dates = data.frame(year=substr(names(hires),2,5),month=substr(names(hires),7,8))
ras.dates
ras   = stack(smoothed_stack_list[i])
hires = stack(hires_stack_list[i])
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste("Env. driver = ", env_driver, "| Folder:", dir.asc.out))
## Make dataframe of dates from raster layers --------------------------------
ras.dates = data.frame(year=substr(names(hires),2,5),month=substr(names(hires),7,8))
ras.dates$yrmo = paste0(ras.dates$year, "-", ras.dates$month)
head(ras.dates); tail(ras.dates)
mo = unique(ras.dates$month)
## Make dataframe of year months before HYCOM data starts
enddummy = min(as.numeric(ras.dates$year))-1
yr = 1980:enddummy
dummy.dates = data.frame(year = character(), month = character())
for(y in yr){
for(m in mo){
dummy.dates = rbind(dummy.dates, c(y,m))
}
}
colnames(dummy.dates) = c("year", "month")
dummy.dates$yrmo = paste(dummy.dates$year, dummy.dates$month, sep="-")
head(dummy.dates); tail(dummy.dates)
## Get monthly averages -------------------------------------------------------
nlayers(month.stack) ## Should be 28 or so
month.stack = stack()
for (month in mo){
#month = "01"
subset.month = raster::subset(ras, grep(paste0('.', month), names(ras), value = T, fixed = T))
month.avg = calc(subset.month, mean)
names(month.avg) = paste0("Mo", month, "_avg", nlayers(subset.month),"y")
month.stack = addLayer(month.stack, month.avg)
}
## Get monthly averages -------------------------------------------------------
nlayers(month.stack) ## Should be 28 or so
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
par(mfrow=c(1,1))
names(ras.comb)
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
names(ras.comb)
#month = "01"
subset.month = terra::subset(ras, grep(paste0('.', month), names(ras), value = T, fixed = T))
for (month in mo){
#month = "01"
subset.month = terra::subset(ras, grep(paste0('.', month), names(ras), value = T, fixed = T))
month.avg = calc(subset.month, mean)
names(month.avg) = paste0("Mo", month, "_avg", nlayers(subset.month),"y")
month.stack = addLayer(month.stack, month.avg)
}
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
month.stack = stack()
for (month in mo){
#month = "01"
subset.month = raster::subset(ras, grep(paste0('.', month), names(ras), value = T, fixed = T))
month.avg = calc(subset.month, mean)
names(month.avg) = paste0("Mo", month, "_avg", nlayers(subset.month),"y")
month.stack = addLayer(month.stack, month.avg)
}
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
par(mfrow=c(1,1))
names(ras.comb)
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black', main = env_driver,
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
for (month in mo){
#month = "01"
subset.month = raster::subset(ras, grep(paste0('.', month), names(ras), value = T, fixed = T))
month.avg = calc(subset.month, mean)
names(month.avg) = paste0(env_driver, "_mo", month, "_avg", nlayers(subset.month),"y")
month.stack = addLayer(month.stack, month.avg)
}
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
## Get monthly averages -------------------------------------------------------
month.stack = stack()
for (month in mo){
#month = "01"
subset.month = raster::subset(ras, grep(paste0('.', month), names(ras), value = T, fixed = T))
month.avg = calc(subset.month, mean)
names(month.avg) = paste0(env_driver, "_mo", month, "_avg", nlayers(subset.month),"y")
month.stack = addLayer(month.stack, month.avg)
}
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
## Write out raster
start = as.numeric(str_sub(names(ras.comb)[1], 2, 5))
stop  = as.numeric(str_sub(names(ras.comb)[nlayers(ras.comb)], 2, 5))
start
## Combine dummy raster set (1980-1992) and data (1993-2022)
rep.stack = stack()
for (year in yr){
#year = 1980
xx = month.stack
names(xx) = paste0(year, "_", substr(labels(month.stack), 3, 8))
rep.stack = addLayer(rep.stack, xx)
}
ras.comb = stack(rep.stack, ras)
## Write out raster
start = as.numeric(str_sub(names(ras.comb)[1], 2, 5))
stop  = as.numeric(str_sub(names(ras.comb)[nlayers(ras.comb)], 2, 5))
start
stop
##------------------------------------------------------------------------------
##
## Set up directory paths
model     = "HYCOM"
## Write out files -----------------------------------------------------------
## Make PDF of plots
## Set plotting maximum to maximum of 99th percentile by month
pdf_map(ras.comb, colscheme = 'virid', dir = dir.pdf.out,
env_name = env_driver, mintile = 0.01, maxtile = 0.99, modtype = model)
substr(labels(month.stack), 3, 8))
substr(labels(month.stack), 3, 8)
labels(month.stack)
substr(labels(month.stack), -10)
substr(labels(month.stack), start=-10)
substr(labels(month.stack), start=-10, -1)
substrRight(labels(month.stack), 10)
(labels(month.stack), 10)
stringr::str_sub(labels(month.stack), start=-10)
stringr::str_sub(labels(month.stack), start=-11)
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
par(mfrow=c(1,1))
names(ras.comb)
## Combine dummy raster set (1980-1992) and data (1993-2022)
rep.stack = stack()
for (year in yr){
#year = 1980
xx = month.stack
names(xx) = paste0(year, "_", stringr::str_sub(labels(month.stack), start=-11))
rep.stack = addLayer(rep.stack, xx)
}
ras.comb = stack(rep.stack, ras)
## Write out raster
start = as.numeric(str_sub(names(ras.comb)[1], 2, 5))
stop  = as.numeric(str_sub(names(ras.comb)[nlayers(ras.comb)], 2, 5))
## Write out files -----------------------------------------------------------
## Make PDF of plots
## Set plotting maximum to maximum of 99th percentile by month
pdf_map(ras.comb, colscheme = 'turbo', dir = dir.pdf.out,
env_name = env_driver, mintile = 0.01, maxtile = 0.99, modtype = model)
col_list <- c("turbo", "turbo", "turbo", "virid", "virid", "virid")
i = 1
## Input parameters-----------------------------------------------------------
env_driver = env_dr_list[i]
ras   = stack(smoothed_stack_list[i])
hires = stack(hires_stack_list[i])
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste("Env. driver = ", env_driver, "| Folder:", dir.asc.out))
## Make dataframe of dates from raster layers --------------------------------
ras.dates = data.frame(year=substr(names(hires),2,5),month=substr(names(hires),7,8))
ras.dates$yrmo = paste0(ras.dates$year, "-", ras.dates$month)
head(ras.dates); tail(ras.dates)
mo = unique(ras.dates$month)
## Make dataframe of year months before HYCOM data starts
enddummy = min(as.numeric(ras.dates$year))-1
yr = 1980:enddummy
dummy.dates = data.frame(year = character(), month = character())
for(y in yr){
for(m in mo){
dummy.dates = rbind(dummy.dates, c(y,m))
}
}
colnames(dummy.dates) = c("year", "month")
dummy.dates$yrmo = paste(dummy.dates$year, dummy.dates$month, sep="-")
head(dummy.dates); tail(dummy.dates)
## Get monthly averages -------------------------------------------------------
month.stack = stack()
for (month in mo){
#month = "01"
subset.month = raster::subset(ras, grep(paste0('.', month), names(ras), value = T, fixed = T))
month.avg = calc(subset.month, mean)
names(month.avg) = paste0(env_driver, "_mo", month, "_avg", nlayers(subset.month),"y")
month.stack = addLayer(month.stack, month.avg)
}
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
par(mfrow=c(1,1))
names(ras.comb)
## Combine dummy raster set (1980-1992) and data (1993-2022)
rep.stack = stack()
for (year in yr){
#year = 1980
xx = month.stack
names(xx) = paste0(year, "_", stringr::str_sub(labels(month.stack), start=-11))
rep.stack = addLayer(rep.stack, xx)
}
ras.comb = stack(rep.stack, ras)
## Write out raster
start = as.numeric(str_sub(names(ras.comb)[1], 2, 5))
stop  = as.numeric(str_sub(names(ras.comb)[nlayers(ras.comb)], 2, 5))
## Write out files -----------------------------------------------------------
## Make PDF of plots
## Set plotting maximum to maximum of 99th percentile by month
pdf_map(ras.comb, colscheme = col_list[i], dir = dir.pdf.out,
env_name = env_driver, mintile = 0.0001, maxtile = 0.9999, modtype = model)
## Set plotting maximum to maximum of 99th percentile by month
pdf_map(ras.comb, colscheme = col_list[i], dir = dir.pdf.out,
env_name = env_driver, mintile = 0.0001, maxtile = 0.9999, modtype = model)
## Save raster
writeRaster(ras.comb, paste0(dir.ras.out, 'EwE_Maps_', env_driver, '_', start, '-', stop), overwrite=T)
## ASCII files by month
writeRaster(ras.comb, paste0(dir.asc.out, env_driver), bylayer=T, suffix = names(ras.comb),
format = 'ascii', overwrite=T)
for (i in 2:length(smoothed_stack_list)){
# i = 1
## Input parameters-----------------------------------------------------------
env_driver = env_dr_list[i]
ras   = stack(smoothed_stack_list[i])
hires = stack(hires_stack_list[i])
dir.asc.out = paste0(fld.asc.out, env_driver, "/")
if(overwrite == 'y') {unlink(dir.asc.out, recursive = TRUE); dir.create(dir.asc.out)}
print(paste("Env. driver = ", env_driver, "| Folder:", dir.asc.out))
## Make dataframe of dates from raster layers --------------------------------
ras.dates = data.frame(year=substr(names(hires),2,5),month=substr(names(hires),7,8))
ras.dates$yrmo = paste0(ras.dates$year, "-", ras.dates$month)
head(ras.dates); tail(ras.dates)
mo = unique(ras.dates$month)
## Make dataframe of year months before HYCOM data starts
enddummy = min(as.numeric(ras.dates$year))-1
yr = 1980:enddummy
dummy.dates = data.frame(year = character(), month = character())
for(y in yr){
for(m in mo){
dummy.dates = rbind(dummy.dates, c(y,m))
}
}
colnames(dummy.dates) = c("year", "month")
dummy.dates$yrmo = paste(dummy.dates$year, dummy.dates$month, sep="-")
head(dummy.dates); tail(dummy.dates)
## Get monthly averages -------------------------------------------------------
month.stack = stack()
for (month in mo){
#month = "01"
subset.month = raster::subset(ras, grep(paste0('.', month), names(ras), value = T, fixed = T))
month.avg = calc(subset.month, mean)
names(month.avg) = paste0(env_driver, "_mo", month, "_avg", nlayers(subset.month),"y")
month.stack = addLayer(month.stack, month.avg)
}
## Plot check
par(mfrow=c(3,4))
plot(month.stack, colNA = 'black',
zlim=c(min(values(month.stack), na.rm=T), max(values(month.stack), na.rm=T))
)
par(mfrow=c(1,1))
names(ras.comb)
## Combine dummy raster set (1980-1992) and data (1993-2022)
rep.stack = stack()
for (year in yr){
#year = 1980
xx = month.stack
names(xx) = paste0(year, "_", stringr::str_sub(labels(month.stack), start=-11))
rep.stack = addLayer(rep.stack, xx)
}
ras.comb = stack(rep.stack, ras)
## Write out raster
start = as.numeric(str_sub(names(ras.comb)[1], 2, 5))
stop  = as.numeric(str_sub(names(ras.comb)[nlayers(ras.comb)], 2, 5))
## Write out files -----------------------------------------------------------
## Make PDF of plots
## Set plotting maximum to maximum of 99th percentile by month
pdf_map(ras.comb, colscheme = col_list[i], dir = dir.pdf.out,
env_name = env_driver, mintile = 0.0001, maxtile = 0.9999, modtype = model)
## Save raster
writeRaster(ras.comb, paste0(dir.ras.out, 'EwE_Maps_', env_driver, '_', start, '-', stop), overwrite=T)
## ASCII files by month
writeRaster(ras.comb, paste0(dir.asc.out, env_driver), bylayer=T, suffix = names(ras.comb),
format = 'ascii', overwrite=T)
}
